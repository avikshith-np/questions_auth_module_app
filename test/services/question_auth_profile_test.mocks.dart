// Mocks generated by Mockito 5.4.6 from annotations
// in question_auth/test/services/question_auth_profile_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:question_auth/src/core/auth_state.dart' as _i2;
import 'package:question_auth/src/models/auth_request.dart' as _i7;
import 'package:question_auth/src/models/auth_response.dart' as _i4;
import 'package:question_auth/src/models/auth_result.dart' as _i3;
import 'package:question_auth/src/services/auth_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthState_0 extends _i1.SmartFake implements _i2.AuthState {
  _FakeAuthState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthResult_1 extends _i1.SmartFake implements _i3.AuthResult {
  _FakeAuthResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserProfileResponse_2 extends _i1.SmartFake
    implements _i4.UserProfileResponse {
  _FakeUserProfileResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i2.AuthState> get authStateStream =>
      (super.noSuchMethod(
            Invocation.getter(#authStateStream),
            returnValue: _i6.Stream<_i2.AuthState>.empty(),
          )
          as _i6.Stream<_i2.AuthState>);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  _i2.AuthState get currentAuthState =>
      (super.noSuchMethod(
            Invocation.getter(#currentAuthState),
            returnValue: _FakeAuthState_0(
              this,
              Invocation.getter(#currentAuthState),
            ),
          )
          as _i2.AuthState);

  @override
  bool get hasFullAppAccess =>
      (super.noSuchMethod(
            Invocation.getter(#hasFullAppAccess),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasIncompleteRoles =>
      (super.noSuchMethod(
            Invocation.getter(#hasIncompleteRoles),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<_i3.AuthResult> signUp(_i7.SignUpRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [request]),
            returnValue: _i6.Future<_i3.AuthResult>.value(
              _FakeAuthResult_1(this, Invocation.method(#signUp, [request])),
            ),
          )
          as _i6.Future<_i3.AuthResult>);

  @override
  _i6.Future<_i3.AuthResult> login(_i7.LoginRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#login, [request]),
            returnValue: _i6.Future<_i3.AuthResult>.value(
              _FakeAuthResult_1(this, Invocation.method(#login, [request])),
            ),
          )
          as _i6.Future<_i3.AuthResult>);

  @override
  _i6.Future<_i4.UserProfileResponse> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i6.Future<_i4.UserProfileResponse>.value(
              _FakeUserProfileResponse_2(
                this,
                Invocation.method(#getCurrentUser, []),
              ),
            ),
          )
          as _i6.Future<_i4.UserProfileResponse>);

  @override
  _i6.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  bool hasRole(String? role) =>
      (super.noSuchMethod(
            Invocation.method(#hasRole, [role]),
            returnValue: false,
          )
          as bool);

  @override
  bool isProfileCompleteForRole(String? role) =>
      (super.noSuchMethod(
            Invocation.method(#isProfileCompleteForRole, [role]),
            returnValue: false,
          )
          as bool);
}
