// Mocks generated by Mockito 5.4.6 from annotations
// in question_auth/test/repositories/auth_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:question_auth/src/core/token_manager.dart' as _i6;
import 'package:question_auth/src/models/auth_request.dart' as _i5;
import 'package:question_auth/src/models/auth_response.dart' as _i2;
import 'package:question_auth/src/models/user.dart' as _i7;
import 'package:question_auth/src/services/api_client.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSignUpResponse_0 extends _i1.SmartFake
    implements _i2.SignUpResponse {
  _FakeSignUpResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoginResponse_1 extends _i1.SmartFake implements _i2.LoginResponse {
  _FakeLoginResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserProfileResponse_2 extends _i1.SmartFake
    implements _i2.UserProfileResponse {
  _FakeUserProfileResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLogoutResponse_3 extends _i1.SmartFake
    implements _i2.LogoutResponse {
  _FakeLogoutResponse_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i3.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> post(
    String? endpoint,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#post, [endpoint, data]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> get(String? endpoint) =>
      (super.noSuchMethod(
            Invocation.method(#get, [endpoint]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  void setAuthToken(String? token) => super.noSuchMethod(
    Invocation.method(#setAuthToken, [token]),
    returnValueForMissingStub: null,
  );

  @override
  void clearAuthToken() => super.noSuchMethod(
    Invocation.method(#clearAuthToken, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.SignUpResponse> register(_i5.SignUpRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#register, [request]),
            returnValue: _i4.Future<_i2.SignUpResponse>.value(
              _FakeSignUpResponse_0(
                this,
                Invocation.method(#register, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.SignUpResponse>);

  @override
  _i4.Future<_i2.LoginResponse> login(_i5.LoginRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#login, [request]),
            returnValue: _i4.Future<_i2.LoginResponse>.value(
              _FakeLoginResponse_1(this, Invocation.method(#login, [request])),
            ),
          )
          as _i4.Future<_i2.LoginResponse>);

  @override
  _i4.Future<_i2.UserProfileResponse> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i4.Future<_i2.UserProfileResponse>.value(
              _FakeUserProfileResponse_2(
                this,
                Invocation.method(#getCurrentUser, []),
              ),
            ),
          )
          as _i4.Future<_i2.UserProfileResponse>);

  @override
  _i4.Future<_i2.LogoutResponse> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<_i2.LogoutResponse>.value(
              _FakeLogoutResponse_3(this, Invocation.method(#logout, [])),
            ),
          )
          as _i4.Future<_i2.LogoutResponse>);
}

/// A class which mocks [TokenManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenManager extends _i1.Mock implements _i6.TokenManager {
  MockTokenManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#saveToken, [token]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> getToken() =>
      (super.noSuchMethod(
            Invocation.method(#getToken, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> clearToken() =>
      (super.noSuchMethod(
            Invocation.method(#clearToken, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> hasValidToken() =>
      (super.noSuchMethod(
            Invocation.method(#hasValidToken, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> isTokenExpired() =>
      (super.noSuchMethod(
            Invocation.method(#isTokenExpired, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<DateTime?> getTokenExpiration() =>
      (super.noSuchMethod(
            Invocation.method(#getTokenExpiration, []),
            returnValue: _i4.Future<DateTime?>.value(),
          )
          as _i4.Future<DateTime?>);

  @override
  _i4.Future<void> saveUserProfile(_i6.UserProfileData? profileData) =>
      (super.noSuchMethod(
            Invocation.method(#saveUserProfile, [profileData]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i6.UserProfileData?> getUserProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfile, []),
            returnValue: _i4.Future<_i6.UserProfileData?>.value(),
          )
          as _i4.Future<_i6.UserProfileData?>);

  @override
  _i4.Future<void> clearUserProfile() =>
      (super.noSuchMethod(
            Invocation.method(#clearUserProfile, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> hasUserProfile() =>
      (super.noSuchMethod(
            Invocation.method(#hasUserProfile, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> updateUserProfile({
    _i7.User? user,
    List<String>? userRoles,
    Map<String, bool>? profileComplete,
    bool? onboardingComplete,
    String? appAccess,
    List<String>? availableRoles,
    List<String>? incompleteRoles,
    String? mode,
    String? viewType,
    String? redirectTo,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [], {
              #user: user,
              #userRoles: userRoles,
              #profileComplete: profileComplete,
              #onboardingComplete: onboardingComplete,
              #appAccess: appAccess,
              #availableRoles: availableRoles,
              #incompleteRoles: incompleteRoles,
              #mode: mode,
              #viewType: viewType,
              #redirectTo: redirectTo,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
